int[][] grid = new int[4][4];
boolean[][] revealed = new boolean[4][4];
int cellSize;
int firstRow = -1, firstCol = -1;
int secondRow = -1, secondCol = -1;
boolean isChecking = false;
int checkTime = 1000;  // Time to wait (milliseconds)
int lastCheckTime = 0;

void setup() {
    size(500, 500);
    textSize(32);
    fill(0);
    background(255);

    cellSize = width / 4;

    int[] temp = {1, 1, 2, 2, 3, 3, 4, 4, 
                  5, 5, 6, 6, 7, 7, 8, 8};
    
    shuffleArray(temp);

    int index = 0;
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[0].length; j++) {
            grid[i][j] = temp[index++];
            revealed[i][j] = false;
        }
    }
}

void draw() {
    background(255);
    
    // Check if enough time has passed to hide the unmatched cells
    if (isChecking && millis() - lastCheckTime > checkTime) {
        if (grid[firstRow][firstCol] != grid[secondRow][secondCol]) {
            revealed[firstRow][firstCol] = false;
            revealed[secondRow][secondCol] = false;
        }
        firstRow = -1;
        firstCol = -1;
        secondRow = -1;
        secondCol = -1;
        isChecking = false;
    }

    // Draw the grid
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[0].length; j++) {
            draw_cell(j * cellSize, i * cellSize, grid[i][j], revealed[i][j]);
        }
    }
}

void draw_cell(int x, int y, int value, boolean isRevealed) {
    stroke(0);
    fill(200);
    rect(x, y, cellSize, cellSize);

    if (isRevealed) {
        fill(0);
        textAlign(CENTER, CENTER);
        text(value, x + cellSize / 2, y + cellSize / 2);
    }
}

void mousePressed() {
    if (isChecking) {
        return;  // If a pair is being checked, do not allow clicking new cells
    }
    
    int col = mouseX / cellSize;
    int row = mouseY / cellSize;

    if (col >= 0 && col < grid[0].length && row >= 0 && row < grid.length) {
        if (!revealed[row][col]) {
            revealed[row][col] = true;
            
            if (firstRow == -1 && firstCol == -1) {
                firstRow = row;
                firstCol = col;
            } else {
                secondRow = row;
                secondCol = col;
                isChecking = true;
                lastCheckTime = millis();  // Record the time when checking begins
            }
        }
    }
}

void shuffleArray(int[] array) {
    for (int i = 0; i < array.length; i++) {
        int randomIndex = (int) random(array.length);
        int tempValue = array[i];
        array[i] = array[randomIndex];
        array[randomIndex] = tempValue;
    }
}
