int[][] grid = new int[4][4];      // Array to store numbers
boolean[][] revealed = new boolean[4][4]; // Stores the revealed status of each cell
int cellSize;

void setup() {
    size(500, 500);
    textSize(32);  // Text size for clarity
    fill(0);       // Text color set to black
    background(255);
    
    // Define the size of each cell
    cellSize = width / 4;

    // Numbers 1-8, repeated twice
    int[] temp = {1, 1, 2, 2, 3, 3, 4, 4, 
                  5, 5, 6, 6, 7, 7, 8, 8};
    
    // Shuffle the numbers
    shuffleArray(temp);

    // Fill the grid with numbers
    int index = 0;
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[0].length; j++) {
            grid[i][j] = temp[index++];
            revealed[i][j] = false;  // Set all cells to hidden initially
        }
    }
}

void draw() {
    background(255);  // Clear the screen each time to update the display
    for (int i = 0; i < grid.length; i++) {
        for (int j = 0; j < grid[0].length; j++) {
            // Draw each cell in the grid
            draw_cell(j * cellSize, i * cellSize, grid[i][j], revealed[i][j]);
        }
    }
}

void draw_cell(int x, int y, int value, boolean isRevealed) {
    // Draw the cell border
    stroke(0);
    fill(200);
    rect(x, y, cellSize, cellSize);  // Set cell size

    // If the cell is revealed, display the number
    if (isRevealed) {
        fill(0);  // Color of the number
        textAlign(CENTER, CENTER);  // Center the number in the cell
        text(value, x + cellSize / 2, y + cellSize / 2);  // Display the number in the center of the cell
    }
}

// Function to detect mouse clicks
void mousePressed() {
    int col = mouseX / cellSize;  // Find the column where the user clicked
    int row = mouseY / cellSize;  // Find the row where the user clicked

    // Check if the mouse click is inside the grid
    if (col >= 0 && col < grid[0].length && row >= 0 && row < grid.length) {
        revealed[row][col] = !revealed[row][col];  // Toggle the revealed status of the cell
    }
}

// Function to shuffle the numbers in the array
void shuffleArray(int[] array) {
    for (int i = 0; i < array.length; i++) {
        int randomIndex = (int) random(array.length);
        // Swap positions
        int tempValue = array[i];
        array[i] = array[randomIndex];
        array[randomIndex] = tempValue;
    }
}
